{"ast":null,"code":"var _jsxFileName = \"/home/pavel/WebstormProjects/F1_Weather/src/components/City.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useDebounce } from 'usehooks-ts';\nimport axios from 'axios';\nimport '../css/City.css';\nimport geoButton from '../img/geolocation-white.svg';\nimport { Button, InputGroup, FormControl } from 'react-bootstrap';\nimport Result from './Result';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst APIKEY = '80f19f935fcea673426957db3e900f2b';\nconst YANDEXAPIKEY = 'ea93e82e-0358-4afe-98e2-e2bfa473d07a';\n\nfunction City() {\n  _s();\n\n  let [currentCity, setCurrentCityName] = useState('');\n  const debouncedValue = useDebounce(currentCity, 500);\n  let [currentWeather, setWeather] = useState('');\n\n  const currentLocation = () => {\n    navigator.geolocation.getCurrentPosition(success, error);\n\n    async function success(position) {\n      localStorage.setItem('longitude', String(position.coords.longitude));\n      localStorage.setItem('latitude', String(position.coords.latitude));\n      let queryString = \"https://geocode-maps.yandex.ru/1.x/?apikey=\" + YANDEXAPIKEY + \"&format=json&en_RU&geocode=\" + String(position.coords.longitude) + \",\" + String(position.coords.latitude);\n      await axios.get(queryString).then(response => {\n        let data = response.data.response.GeoObjectCollection.featureMember[0];\n        let city = data.GeoObject.metaDataProperty.GeocoderMetaData.Address.Components[3].name;\n        setCurrentCityName(city);\n        setCurrentWeather();\n      });\n    }\n\n    function error() {\n      console.log('error current position!');\n    }\n  };\n\n  const getCoordsForCityName = e => {\n    setCurrentCityName(e.target.value);\n  };\n\n  useEffect(() => {\n    if (debouncedValue) {\n      let queryString = \"https://geocode-maps.yandex.ru/1.x/?apikey=\" + YANDEXAPIKEY + \"&format=json&en_RU&geocode=\" + debouncedValue;\n      axios.get(queryString).then(response => {\n        let cityCoords = response.data.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos;\n        const arrayCoords = cityCoords.split(\" \");\n        localStorage.setItem('longitude', arrayCoords[0]);\n        localStorage.setItem('latitude', arrayCoords[1]);\n        setCurrentWeather();\n      });\n    }\n  }, [debouncedValue]);\n\n  function setCurrentWeather() {\n    let queryString = 'https://api.openweathermap.org/data/2.5/onecall?lat=' + localStorage.getItem('latitude') + '&lon=' + localStorage.getItem('longitude') + '&units=metric&appid=' + APIKEY;\n    axios.get(queryString).then(response => {\n      setWeather(response.data);\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"groupCityInput\",\n    children: [/*#__PURE__*/_jsxDEV(InputGroup, {\n      className: \"mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(FormControl, {\n        value: currentCity,\n        onChange: getCoordsForCityName,\n        placeholder: \"City\",\n        \"aria-label\": \"City\",\n        \"aria-describedby\": \"City\",\n        id: \"inputCity\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"outline-secondary\",\n        id: \"button-addon2\",\n        onClick: currentLocation,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          className: \"geo-img\",\n          src: geoButton,\n          height: \"25px\",\n          width: \"25px\",\n          alt: \"GeoButton\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Result, {\n      currentCity: currentCity,\n      currentWeather: currentWeather\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 9\n  }, this);\n}\n\n_s(City, \"aa6HmUNXpi6iG/Oo30ASBXh+UwM=\", false, function () {\n  return [useDebounce];\n});\n\n_c = City;\nexport default City;\n\nvar _c;\n\n$RefreshReg$(_c, \"City\");","map":{"version":3,"sources":["/home/pavel/WebstormProjects/F1_Weather/src/components/City.tsx"],"names":["React","useEffect","useState","useDebounce","axios","geoButton","Button","InputGroup","FormControl","Result","APIKEY","YANDEXAPIKEY","City","currentCity","setCurrentCityName","debouncedValue","currentWeather","setWeather","currentLocation","navigator","geolocation","getCurrentPosition","success","error","position","localStorage","setItem","String","coords","longitude","latitude","queryString","get","then","response","data","GeoObjectCollection","featureMember","city","GeoObject","metaDataProperty","GeocoderMetaData","Address","Components","name","setCurrentWeather","console","log","getCoordsForCityName","e","target","value","cityCoords","Point","pos","arrayCoords","split","getItem"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, useEffect, useState } from 'react';\r\nimport { useDebounce } from 'usehooks-ts';\r\nimport axios from 'axios';\r\nimport '../css/City.css';\r\nimport geoButton from '../img/geolocation-white.svg';\r\n\r\nimport { Button, InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nimport Result from './Result';\r\n\r\nconst APIKEY = '80f19f935fcea673426957db3e900f2b';\r\nconst YANDEXAPIKEY = 'ea93e82e-0358-4afe-98e2-e2bfa473d07a';\r\n\r\n\r\nfunction City() {\r\n\r\n    let [currentCity, setCurrentCityName] = useState<string>('');\r\n    const debouncedValue = useDebounce<string>(currentCity, 500);\r\n    let [currentWeather, setWeather] = useState('');\r\n\r\n    const currentLocation = () => {\r\n        navigator.geolocation.getCurrentPosition(success, error);\r\n        async function success(position: any) {\r\n            localStorage.setItem('longitude', String(position.coords.longitude));\r\n            localStorage.setItem('latitude', String(position.coords.latitude));\r\n\r\n            let queryString = \"https://geocode-maps.yandex.ru/1.x/?apikey=\"+YANDEXAPIKEY+\"&format=json&en_RU&geocode=\"+ String(position.coords.longitude)+\",\"+ String(position.coords.latitude);\r\n            await axios.get(queryString).then(response => {\r\n               let data = response.data.response.GeoObjectCollection.featureMember[0];\r\n               let city = data.GeoObject.metaDataProperty.GeocoderMetaData.Address.Components[3].name;\r\n                setCurrentCityName(city);\r\n                setCurrentWeather();\r\n            });\r\n        }\r\n\r\n        function error() {\r\n            console.log('error current position!');\r\n        }\r\n    }\r\n\r\n    const getCoordsForCityName = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setCurrentCityName(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (debouncedValue) {\r\n            let queryString = \"https://geocode-maps.yandex.ru/1.x/?apikey=\"+YANDEXAPIKEY+\"&format=json&en_RU&geocode=\" + debouncedValue;\r\n            axios.get(queryString).then(response => {\r\n                let cityCoords = response.data.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos;\r\n                const arrayCoords = cityCoords.split(\" \");\r\n                localStorage.setItem('longitude', arrayCoords[0]);\r\n                localStorage.setItem('latitude', arrayCoords[1]);\r\n                setCurrentWeather();\r\n            });\r\n        }\r\n    }, [debouncedValue]);\r\n\r\n\r\n    function setCurrentWeather() {\r\n        let queryString = 'https://api.openweathermap.org/data/2.5/onecall?lat='+localStorage.getItem('latitude')+'&lon='+localStorage.getItem('longitude')+'&units=metric&appid='+APIKEY;\r\n        axios.get(queryString).then(response => {\r\n            setWeather(response.data);\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className='groupCityInput'>\r\n            <InputGroup className=\"mb-3\">\r\n                <FormControl value = {currentCity}\r\n                             onChange = { getCoordsForCityName }\r\n                             placeholder=\"City\"\r\n                             aria-label=\"City\"\r\n                             aria-describedby=\"City\"\r\n                             id = \"inputCity\"\r\n                />\r\n                <Button variant=\"outline-secondary\" id=\"button-addon2\" onClick = { currentLocation }>\r\n                    <img className='geo-img' src={ geoButton } height = \"25px\" width = \"25px\" alt='GeoButton'></img>\r\n                </Button>\r\n            </InputGroup>\r\n            <Result currentCity = {currentCity} currentWeather = {currentWeather}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default City;"]},"metadata":{},"sourceType":"module"}